#pragma kernel CSMain

RWStructuredBuffer<float> DensityBuffer;
uint3 size;
float isoLevel;
float baseHeight;
float bumpHeight;
float noiseScale;
float chunkWorldOffsetY;
int octaves;
float persistence;
float lacunarity;
float2 chunkWorldOffsetXZ;

float2 hash2(float2 p)
{
    p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
    return frac(sin(p) * 43758.5453);
}

float noise2D(float2 p)
{
    float2 i = floor(p);
    float2 f = frac(p);

    float2 u = f * f * (3.0 - 2.0 * f);

    float2 a = hash2(i + float2(0.0, 0.0));
    float2 b = hash2(i + float2(1.0, 0.0));
    float2 c = hash2(i + float2(0.0, 1.0));
    float2 d = hash2(i + float2(1.0, 1.0));

    float va = a.x;
    float vb = b.x;
    float vc = c.x;
    float vd = d.x;

    float lerpX1 = lerp(va, vb, u.x);
    float lerpX2 = lerp(vc, vd, u.x);
    return lerp(lerpX1, lerpX2, u.y);
}

float fbm(float2 p, int octaves, float persistence, float lacunarity)
{
    float value = 0.0;
    float amplitude = 1.0;
    float frequency = 1.0;

    for (int i = 0; i < octaves; i++)
    {
        value += noise2D(p * frequency) * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return value;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x > size.x || id.y > size.y || id.z > size.z) return;

    float3 pos = float3(id.x, id.y, id.z);
    float worldY = pos.y + chunkWorldOffsetY;

    float2 noiseCoord = (float2(pos.x, pos.z) + chunkWorldOffsetXZ) * noiseScale;
    float perlin = fbm(noiseCoord, octaves, persistence, lacunarity);
    float height = baseHeight + (perlin - 0.5f) * 2.0f * bumpHeight;

    float density = height - worldY;
    int index = id.x + id.y * (size.x + 1) + id.z * (size.x + 1) * (size.y + 1);
    DensityBuffer[index] = density;
}
